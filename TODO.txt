AUDIO!!!!
Idea for later: chance for enemy to be replaced by a gold or silver variant and give 5-10 coins (or more) on death(of the enemy)


  /************************/
 /-----FULL PROGRAM: -----/
/......................../

#include <stdio.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_mixer.h>

typedef enum Environment{
    GROUND,
    UNDERGROUND,
    UNDERWATER,
    CASTLE
}Environment;

typedef struct Input{
    bool UP = false;
    bool DOWN = false;
    bool LEFT = false;
    bool RIGHT = false;
    bool A = false;
    bool B = false;
    bool START = false;
    bool SELECT = false;
}Input;


class Game{
public:
    Game();
    ~Game();
    void Loop();
private:
    SDL_Window* window;
    SDL_Renderer* renderer;
    bool paused;
};

int main(){
    Game game;
    game.Loop();
    return 0;
}


class IMG{
public:
    IMG(SDL_Renderer* renderer);
    ~IMG();

    SDL_Texture* GetBlocksTex();
    SDL_Texture* GetEnemiesTex();
    SDL_Texture* GetMarioTex();
private:
    SDL_Texture* blocks_tex;
    SDL_Texture* enemies_tex;
    SDL_Texture* mario_tex;
};


typedef enum Sound{
    OneUp,
    BowserFall,
    BowserFire,
    BreakBlock,
    Bump,
    Coin,
    FireBall,
    FireWorks,
    FlagPole,
    GameOver,
    JumpSmall,
    JumpSuper,
    Kick,
    MarioDies,
    Pause,
    Pipe,
    PowerUpApears,
    PowerUp,
    StageClear,
    Stomp,
    Vine,
    Warning,
    WorldClear
}sound;
typedef enum Music{
    Castle,
    End,
    Flag,
    GameOver_MUS,
    Over,
    StarManCloud,
    UnderWorld,
    Water
}music;

class Mix{
public:
    Mix();
    ~Mix();
    void PlaySound(Sound p_sound);
    void PlayMusic(Music p_music);
    void UpdateMusic(Environment environment);
private:
    struct sounds{
        Mix_Chunk* OneUp;
        Mix_Chunk* BowserFall;
        Mix_Chunk* BowserFire;
        Mix_Chunk* BreakBlock;
        Mix_Chunk* Bump;
        Mix_Chunk* Coin;
        Mix_Chunk* FireBall;
        Mix_Chunk* FireWorks;
        Mix_Chunk* FlagPole;
        Mix_Chunk* GameOver;
        Mix_Chunk* JumpSmall;
        Mix_Chunk* JumpSuper;
        Mix_Chunk* Kick;
        Mix_Chunk* MarioDies;
        Mix_Chunk* Pause;
        Mix_Chunk* Pipe;
        Mix_Chunk* PowerUpApears;
        Mix_Chunk* PowerUp;
        Mix_Chunk* StageClear;
        Mix_Chunk* Stomp;
        Mix_Chunk* Vine;
        Mix_Chunk* Warning;
        Mix_Chunk* WorldClear;
    }sounds;
    struct music{
        Mix_Music* Castle;
        Mix_Music* End;
        Mix_Music* Flag;
        Mix_Music* GameOver;
        Mix_Music* Over;
        Mix_Music* StarManCloud;
        Mix_Music* UnderWorld;
        Mix_Music* Water;
    }music;
};


class Mario{
public:
    Mario();
    Mario(int scale);

    void Update(Input input, SDL_Renderer* renderer, SDL_Texture* texture, Mix* mix);
private:
    int B_Held = 0;
    float MaxJumpHeight = 1;
    int JumpStartPos = 3000;
    bool CanJump = true;
    bool on_floor = false;
    int scale;
    int frame = 0;  // starting at 0
    struct velocity{
        int x = 0;
        int y = 0;
    }velocity;
    SDL_Rect src;
    SDL_Rect dst;
    enum PowerUp{
        NONE,
        BIG,
        FIRE
    }PowerUp;
    enum Animation{
        IDLE,       // 1 frame
        RUN,        // 3 frames
        JUMP,       // 1 frame
        STOP,       // 1 frame
        DUCK,       // 1 frame
        CLIMB,      // 2 frames
        SWIM,       // 5 frames
        THROW,      // 1 frames
        THROW_RUN,  // 3 frames
        THROW_JUMP, // 1 frame 
        DIE         // 1 frame
    }Animation;
    enum Direction{
        LEFT,
        RIGHT
    }Direction;

    int _DebugSELECTCoolDown = 0;
};


Game::Game(){
    if(SDL_Init(SDL_INIT_VIDEO | SDL_INIT_EVENTS) < 0){
        printf("ERROR: SDL_Init Failed; %s\n", SDL_GetError());
    }
    window = SDL_CreateWindow("Title", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 1280, 720, SDL_WINDOW_SHOWN);
    if(window == NULL){
        printf("ERROR: SDL_CreateWindow Failed; %s\n", SDL_GetError());
    }
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if(renderer == NULL){
        printf("ERROR: SDL_CreateRenderer Failed; %s\n", SDL_GetError());
    }
}

Game::~Game(){
    SDL_DestroyWindow(window);
    SDL_DestroyRenderer(renderer);
    SDL_Quit();
}

void Game::Loop(){
    IMG img(renderer);
    Mix mix;
    Mario mario;
    Environment environment = GROUND;

    bool running = true;
    SDL_Event event;
    Input Input;
    while(running){
        //Input
        while (SDL_PollEvent(&event)){
            switch (event.type){
                case SDL_QUIT:
                    running = false;
                    break;
                case SDL_KEYDOWN:
                    switch(event.key.keysym.sym){
                        case SDLK_UP:
                            Input.UP = true;
                            break;
                        case SDLK_DOWN:
                            Input.DOWN = true;
                            break;
                        case SDLK_LEFT:
                            Input.LEFT = true;
                            break;
                        case SDLK_RIGHT:
                            Input.RIGHT = true;
                            break;
                        case SDLK_z:
                            Input.B = true;
                            break;
                        case SDLK_x:
                            Input.A = true;
                            break;
                        case SDLK_RETURN:
                            Input.START = true;
                            paused = !paused;
                            break;
                        case SDLK_LSHIFT:
                            Input.SELECT = true;
                            break;
                        case SDLK_ESCAPE:
                            running = false;
                            break;
                        default:
                            break;
                    }
                    break;
                case SDL_KEYUP:
                    switch(event.key.keysym.sym){
                        case SDLK_UP:
                            Input.UP = false;
                            break;
                        case SDLK_DOWN:
                            Input.DOWN = false;
                            break;
                        case SDLK_LEFT:
                            Input.LEFT = false;
                            break;
                        case SDLK_RIGHT:
                            Input.RIGHT = false;
                            break;
                        case SDLK_z:
                            Input.B = false;
                            break;
                        case SDLK_x:
                            Input.A = false;
                            break;
                        case SDLK_RETURN:
                            Input.START = false;
                            break;
                        case SDLK_LSHIFT:
                            Input.SELECT = false;
                            break;
                        default:
                            break;
                    }
                    break;
                default:
                    break;
            }
        }
        if(!paused){
            SDL_RenderClear(renderer);

            //Update
            mario.Update(Input, renderer, img.GetMarioTex(), &mix);

            SDL_RenderPresent(renderer);

            SDL_Delay(50);

            mix.UpdateMusic(environment);
        }
    }
}


IMG::IMG(SDL_Renderer* renderer){
    if(IMG_Init(IMG_INIT_PNG) < 0){
        printf("ERROR: IMG_Init Failed; %s\n", SDL_GetError());
    }
    
    char* BasePath = SDL_GetBasePath();
    char* B_Path = strcat(BasePath, "res/Textures/blocks.png");
    BasePath = SDL_GetBasePath();
    char* E_Path = strcat(BasePath, "res/Textures/enemies.png");
    BasePath = SDL_GetBasePath();
    char* M_Path = strcat(BasePath, "res/Textures/mario.png");
    BasePath = SDL_GetBasePath();

    blocks_tex = IMG_LoadTexture(renderer, B_Path);
    enemies_tex = IMG_LoadTexture(renderer, E_Path);
    mario_tex = IMG_LoadTexture(renderer, M_Path);
    if(blocks_tex == NULL || enemies_tex == NULL || mario_tex == NULL){
        printf("ERROR: IMG_LoadTexture Failed; %s\n", SDL_GetError());
    }
}

IMG::~IMG(){
    SDL_DestroyTexture(blocks_tex);
    SDL_DestroyTexture(enemies_tex);
    SDL_DestroyTexture(mario_tex);
    IMG_Quit();
}

SDL_Texture* IMG::GetBlocksTex(){
    return blocks_tex;
}
SDL_Texture* IMG::GetEnemiesTex(){
    return enemies_tex;
}
SDL_Texture* IMG::GetMarioTex(){
    return mario_tex;
}


Mix::Mix(){
    if(Mix_Init(MIX_INIT_OGG | MIX_INIT_WAVPACK) < 0){
        printf("ERROR: Mix_Init Failed; %s\n", SDL_GetError());
    }
    if(Mix_OpenAudio(44100, AUDIO_S16LSB, 1, 1024) < 0){
        printf("ERROR: Mix_OpenAudio Failed; %s\n", Mix_GetError());
    }
    char* BasePath = SDL_GetBasePath();

    //Load sounds
    char* JS_S_Path = strcat(BasePath, "res/Audio/SFX/smb_jump-small.wav");
    //printf("%s\n", JS_S_Path);
    sounds.JumpSmall = Mix_LoadWAV(JS_S_Path);
    if(sounds.JumpSmall == NULL){
        printf("ERROR: Mix_LoadWav Failed; %s\n", SDL_GetError());
    }

    //Load Music
    BasePath = SDL_GetBasePath();
    char* Over_M_Path = strcat(BasePath, "res/Audio/Music/SMB_Overworld_Theme.oga");
    music.Over = Mix_LoadMUS(Over_M_Path);
    if(music.Over == NULL){
        printf("ERROR: Mix_LoadMUS Failed; %s\n", SDL_GetError());
    }
}

Mix::~Mix(){
    Mix_FreeChunk(sounds.JumpSmall);
    Mix_FreeMusic(music.Over);
    Mix_Quit();
}

void Mix::PlaySound(Sound p_sound){
    switch(p_sound){
        case JumpSmall:
            Mix_PlayChannel(-1, sounds.JumpSmall, 0);
        default:
            printf("ERROR: Sound not found!");
    }
}

void Mix::PlayMusic(Music p_music){
    switch(p_music){
        case Over:
            Mix_PlayMusic(music.Over, 0);
        default:
            printf("ERROR: Music not found!");
    }
}

void Mix::UpdateMusic(Environment environment){
    if(!Mix_PlayingMusic){
        switch (environment){
            case GROUND:
                Mix_PlayMusic(music.Over, 0);
                break;
            default:
                break;
        }
    }
}


Mario::Mario(){
    scale = 4;
    src = {0, 72, 18, 18};
    dst = {72, 576, 72, 72};
    Animation = IDLE;
    PowerUp = NONE;
}

Mario::Mario(int p_scale){
    scale = p_scale;
    src = {0, 72, 18, 18};
    dst = {0, 0, 18 * scale, 18 * scale};
    Animation = IDLE;
    PowerUp = NONE;
}

void Mario::Update(Input input, SDL_Renderer* renderer, SDL_Texture* texture, Mix* mix){
    //Check for PoweUps:
    if(input.SELECT && _DebugSELECTCoolDown <= 0){
        _DebugSELECTCoolDown = 5;
        if(PowerUp == NONE){
            PowerUp = BIG;
        }else if(PowerUp == BIG){
            PowerUp = FIRE;
        }else if(PowerUp == FIRE){
            PowerUp = NONE;
        }
    }else if(input.SELECT){
        _DebugSELECTCoolDown--;
    }

    //Gravity
    velocity.y = 15;

    //change position based on input
    if(input.LEFT){
        velocity.x = -10;
        Direction = LEFT;
    }
    if(input.RIGHT){
        velocity.x = 10;
        Direction = RIGHT;
    }
    if(input.B){
        if(Direction == RIGHT){
            velocity.x += 5;
        }else if(Direction == LEFT){
            velocity.x += -5;
        }
    }
    if(!input.RIGHT && !input.LEFT){
        velocity.x = 0;
    }

    if(input.A && on_floor){
        JumpStartPos = dst.y;
        //printf("JUMP!!\n");
        if(PowerUp == NONE){
            mix->PlaySound(JumpSmall);
        }else{
            mix->PlaySound(JumpSuper);
        }
    }else if(input.A){
        if(MaxJumpHeight < 6){
            MaxJumpHeight += 0.15;
        }
    }else if(on_floor){
        JumpStartPos = 3000;
        MaxJumpHeight = 1.0;
    }
    if(dst.y >= JumpStartPos - dst.w * MaxJumpHeight){ //width because marios height will change but his width will allways be small mario's height
        velocity.y = -15;
    }else{
        JumpStartPos = 3000;
    }if(!input.A){
        JumpStartPos = 3000;
    }

    //Update possition based on velocity
    dst.x += velocity.x;
    dst.y += velocity.y;

    //check for collision
    if(dst.x < 0){
        dst.x = 0;
    }
    if(dst.x + dst.w > 1280){
        dst.x = 1280 - dst.w;
    }
    if(dst.y < 0){
        dst.y = 0;
    }
    if(dst.y + dst.h > 720){
        dst.y = 720 - dst.h;
        on_floor = true;
    }else{
        on_floor = false;
    }

    //Update dst and src size based on PowerUp
    switch(PowerUp){
        case NONE:
            src.h = 18;
            dst.h = 18 * scale;
            break;
        case BIG:
            src.h = 36;
            dst.h = 36 * scale;
            break;
        case FIRE:
            src.h = 36;
            dst.h = 36 * scale;
            break;
        default:
            printf("No PowerUp?!?...\n");
            break;
    }

    //check input for animations
    if(velocity.x == 0){
        Animation = IDLE;
    }else{
        Animation = RUN;
    }
    if(!on_floor){
        Animation = JUMP; //keep under run (to make sure JUMP overrides RUN)
    }
    if(input.DOWN && (PowerUp == BIG || PowerUp == FIRE)){
        Animation = DUCK;
    }
    if(input.B && PowerUp == FIRE && B_Held > 0){
        B_Held--;
        if(velocity.x == 0){
            Animation = THROW;
        }else{
            Animation = THROW_RUN;
        }
        if(!on_floor){
            Animation = THROW_JUMP;
        }
    }else if(!input.B){
        B_Held = 10;
    }

    //Animate:
    switch(Animation){
        case IDLE:  //done
            switch(PowerUp){
                case NONE:
                    src.x = 0;
                    src.y = 72;
                    break;
                case BIG:
                    src.x = 0;
                    src.y = 0;
                    break;
                case FIRE:
                    src.x = 0;
                    src.y = 36;
                    break;
            }
            break;
        case RUN:   //Perfect
            int rn_mtlpr;
            if(input.B){
                rn_mtlpr = 5;
            }else{
                rn_mtlpr = 10;
            }
            if(frame > 2.9 * rn_mtlpr){
                frame = 0;
            }
            switch(PowerUp){
                case NONE:
                    src.x = 72 + 18 * (frame / rn_mtlpr);
                    src.y = 72;
                    break;
                case BIG:
                    src.x = 72 + 18 * (frame / rn_mtlpr);
                    src.y = 0;
                    break;
                case FIRE:
                    src.x = 72 + 18 * (frame / rn_mtlpr);
                    src.y = 36;
                    break;
            }
            frame++;
            break;
        case JUMP:  //done
            switch(PowerUp){
                case NONE:
                    src.x = 36;
                    src.y = 72;
                    break;
                case BIG:
                    src.x = 36;
                    src.y = 0;
                    break;
                case FIRE:
                    src.x = 36;
                    src.y = 36;
                    break;
            }
            break;
        case STOP:  //done
            switch(PowerUp){
                case NONE:
                    src.x = 18;
                    src.y = 72;
                    break;
                case BIG:
                    src.x = 18;
                    src.y = 0;
                    break;
                case FIRE:
                    src.x = 18;
                    src.y = 36;
                    break;
            }
            break;
        case DUCK:  //done
            switch(PowerUp){
                case NONE:
                    src.x = 0;
                    src.y = 72;
                    break;
                case BIG:
                    src.x = 54;
                    src.y = 0;
                    break;
                case FIRE:
                    src.x = 54;
                    src.y = 36;
                    break;
            }
            break;
        case CLIMB: //done
        if(frame > 1){
            frame = 0;
        }
            switch(PowerUp){
                case NONE:
                    src.x = 126 + 18 * frame;
                    src.y = 72;
                    break;
                case BIG:
                    src.x = 126 + 18 * frame;
                    src.y = 0;
                    break;
                case FIRE:
                    src.x = 126 + 18 * frame;
                    src.y = 36;
                    break;
            }
            frame++;
            break;
        case SWIM:  //done
            if(frame > 5){
                frame = 0;
            }
            switch(PowerUp){
                case NONE:
                    src.x = 162 + 18 * frame;
                    src.y = 72;
                    break;
                case BIG:
                    src.x = 162 + 18 * frame;
                    src.y = 0;
                    break;
                case FIRE:
                    src.x = 162 + 18 * frame;
                    src.y = 36;
                    break;
            }
            frame++;
            break;
        case THROW: //done
            switch(PowerUp){
                case NONE:
                    src.x = 0;
                    src.y = 72;
                    break;
                case BIG:
                    src.x = 0;
                    src.y = 0;
                    break;
                case FIRE:
                    src.x = 270;
                    src.y = 36;
                    break;
            }
            break;
        case THROW_RUN:   //Like RUN
            int fr_rn_mtlpr;
            fr_rn_mtlpr = 5;
            if(frame > 2.9 * fr_rn_mtlpr){
                frame = 0;
            }
            switch(PowerUp){
                case NONE:
                    src.x = 72 + 18 * (frame / fr_rn_mtlpr);
                    src.y = 72;
                    break;
                case BIG:
                    src.x = 72 + 18 * (frame / fr_rn_mtlpr);
                    src.y = 0;
                    break;
                case FIRE:
                    src.x = 306 + 18 * (frame / fr_rn_mtlpr);
                    src.y = 36;
                    break;
            }
            frame++;
            break;
        case THROW_JUMP:  //done
            switch(PowerUp){
                case NONE:
                    src.x = 36;
                    src.y = 72;
                    break;
                case BIG:
                    src.x = 36;
                    src.y = 0;
                    break;
                case FIRE:
                    src.x = 288;
                    src.y = 36;
                    break;
            }
            break;
        case DIE:   //done
            switch(PowerUp){
                case NONE:
                    src.x = 54;
                    src.y = 72;
                    break;
                case BIG:
                    src.x = 0;
                    src.y = 72;
                    break;
                case FIRE:
                    src.x = 0;
                    src.y = 0;
                    break;
            }
            break;
        default:
            printf("ERROR: No Animation! %s\n", SDL_GetError());
            break;
    }

    if(Direction == LEFT){
        SDL_RenderCopyEx(renderer, texture, &src, &dst, 0, NULL, SDL_FLIP_HORIZONTAL);
    }else{
        SDL_RenderCopy(renderer, texture, &src, &dst);
    }
}